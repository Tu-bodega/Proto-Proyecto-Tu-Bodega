{"ast":null,"code":"import { useEffect, useRef } from 'react';\n\n/**\r\n * Store the last of some value. Tracked via a `Ref` only updating it\r\n * after the component renders.\r\n *\r\n * Helpful if you need to compare a prop value to it's previous value during render.\r\n *\r\n * ```ts\r\n * function Component(props) {\r\n *   const lastProps = usePrevious(props)\r\n *\r\n *   if (lastProps.foo !== props.foo)\r\n *     resetValueFromProps(props.foo)\r\n * }\r\n * ```\r\n *\r\n * @param value the value to track\r\n */\nexport default function usePrevious(value) {\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}","map":{"version":3,"names":["useEffect","useRef","usePrevious","value","ref","current"],"sources":["C:/Users/kamil/OneDrive/Escritorio/Proto-Proyecto-Tu-Bodega/front/node_modules/@restart/hooks/esm/usePrevious.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Store the last of some value. Tracked via a `Ref` only updating it\r\n * after the component renders.\r\n *\r\n * Helpful if you need to compare a prop value to it's previous value during render.\r\n *\r\n * ```ts\r\n * function Component(props) {\r\n *   const lastProps = usePrevious(props)\r\n *\r\n *   if (lastProps.foo !== props.foo)\r\n *     resetValueFromProps(props.foo)\r\n * }\r\n * ```\r\n *\r\n * @param value the value to track\r\n */\r\nexport default function usePrevious(value) {\r\n  const ref = useRef(null);\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAWA,CAACC,KAAK,EAAE;EACzC,MAAMC,GAAG,GAAGH,MAAM,CAAC,IAAI,CAAC;EACxBD,SAAS,CAAC,MAAM;IACdI,GAAG,CAACC,OAAO,GAAGF,KAAK;EACrB,CAAC,CAAC;EACF,OAAOC,GAAG,CAACC,OAAO;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}