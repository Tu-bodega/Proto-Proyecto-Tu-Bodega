{"ast":null,"code":"import { useEffect, useRef } from 'react';\n\n/**\r\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\r\n * value is the one rendered with. Generally only required for Concurrent mode usage\r\n * where previous work in `render()` may be discarded before being used.\r\n *\r\n * This is safe to access in an event handler.\r\n *\r\n * @param value The `Ref` value\r\n */\nfunction useCommittedRef(value) {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nexport default useCommittedRef;","map":{"version":3,"names":["useEffect","useRef","useCommittedRef","value","ref","current"],"sources":["C:/Users/kamil/OneDrive/Escritorio/Proto-Proyecto-Tu-Bodega/front/node_modules/@restart/hooks/esm/useCommittedRef.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\r\n * value is the one rendered with. Generally only required for Concurrent mode usage\r\n * where previous work in `render()` may be discarded before being used.\r\n *\r\n * This is safe to access in an event handler.\r\n *\r\n * @param value The `Ref` value\r\n */\r\nfunction useCommittedRef(value) {\r\n  const ref = useRef(value);\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref;\r\n}\r\nexport default useCommittedRef;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,KAAK,EAAE;EAC9B,MAAMC,GAAG,GAAGH,MAAM,CAACE,KAAK,CAAC;EACzBH,SAAS,CAAC,MAAM;IACdI,GAAG,CAACC,OAAO,GAAGF,KAAK;EACrB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACX,OAAOC,GAAG;AACZ;AACA,eAAeF,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}